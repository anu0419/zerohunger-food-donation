<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Donate Food</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>
    <script src="/js/maps-config.js"></script>
    <script src="/js/openstreetmap-utils.js"></script>
    <script src="/js/ml-services/recommendation-service.js"></script>
    <script src="/js/ml-services/food-quality-service.js"></script>
    
    <!-- Leaflet CSS and JS for OpenStreetMap -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    
    <style>
      body {
        background-image: url("https://static.vecteezy.com/system/resources/previews/001/409/329/original/colorful-organic-geometric-shapes-abstract-background-free-vector.jpg");
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
      }
      .con {
        display: flex;
        align-items: center;
      }
      .maincon {
        margin-top: 100px;
      }
      .head {
        text-align: center;
      }
      .con2 {
        display: flex;
        justify-content: center;
      }
      .content {
        height: auto;
        width: 600px;
        box-shadow: 0 0 5px gray;
        background-color: white;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 20px;
      }

      .spans {
        max-width: 500px;
        height: auto;
        display: flex;
        flex-wrap: wrap;
      }
      .box {
        margin-top: 10px;
        margin-left: 10px;
        box-shadow: 0 0 5px grey;
        padding: 10px;
      }
      select {
        width: 370px;
        height: 40px;
        margin-bottom: 20px;
        border-radius: 5px;
        background-color: white;
        border: 2px solid gray;
      }
      .address {
        width: 500px;
        box-shadow: 0 0 5px grey;
        border-radius: 5px;
        padding: 10px;
      }
      .address p {
        margin: 0;
      }
      .donate {
        margin: 20px 0px 0px 0px;
        display: flex;
        justify-content: center;
      }
      .donate button {
        height: 50px;
        width: 150px;
        background-color: rgb(66 164 199);
        border-radius: 5px;
        border: none;
        color: white;
      }
      .donate button:hover {
        box-shadow: 1px 1px 5px rgb(0, 42, 104);
      }
      .btb {
        height: 40px;
        width: 100px;
        background-color: rgb(160, 216, 29);
        border-radius: 5px;
        border: none;
        color: white;
      }
      .btb:hover {
        box-shadow: 1px 1px 5px rgb(11, 114, 27);
      }
      #def_in {
        height: 40px;
        padding: 10px;
        border: 1px solid gray;
        border-radius: 5px;
      }
      #inputContainer {
        margin-bottom: 20px;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        margin-top: 10px;
      }
      #inputContainer input {
        margin-right: 10px;
        margin-top: 12px;
        text-align: left;
        border: 2px solid gray;
      }
      #inputContainer img {
        cursor: pointer;
        margin-top: -5px;
        height: 40px;
        width: 40px;
      }
      #inputContainer div {
        display: flex;
        flex-wrap: wrap-reverse;
      }
      #inp1 {
        height: 40px;
        padding: 10px;
        width: 370px;
        border-radius: 5px;
      }
      #inp2 {
        height: 40px;
        padding: 10px;
        width: 20%;
        border-radius: 5px;
      }
      #inp1:focus,
      #inp2:focus,
      #org_sel:focus {
        border: none;
        outline: 2px solid rgb(1, 1, 93);
        box-shadow: 0 0 5px rgb(112, 112, 255);
      }
      .hed {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .popup {
        height: 100ch;
        width: 100%;
        position: absolute;
        top: 0;
        background-color: rgba(0, 0, 0, 0.37);
        display: flex;
        align-items: center;
        justify-content: center;
        display: none;
      }
      .popChild {
        background-color: white;
        height: 220px;
        width: 420px;
        padding: 20px;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
      #done {
        height: 40px;
        width: 100px;
        border-radius: 5px;
        border: none;
        background-color: deepskyblue;
        box-shadow: 1px 1px 5px gray;
        color: white;
        font-weight: bold;
      }
      #donation-map {
        height: 300px;
        width: 100%;
        margin-top: 20px;
        margin-bottom: 20px;
        border-radius: 5px;
        box-shadow: 0 0 5px grey;
      }
      
      /* Recommendation styles */
      .recommended-badge {
        background-color: #28a745;
        color: white;
        font-size: 0.7rem;
        padding: 2px 5px;
        border-radius: 3px;
        margin-left: 5px;
        vertical-align: middle;
      }
      
      .recommendation-info {
        margin-top: 5px;
        font-size: 0.8rem;
        color: #666;
        font-style: italic;
      }
      
      /* Food quality assessment styles */
      .image-upload-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        background-color: #f9f9f9;
      }
      
      .quality-badge {
        display: inline-block;
        padding: 3px 8px;
        color: white;
        border-radius: 12px;
        font-size: 0.8rem;
        margin-bottom: 8px;
      }
      
      .warning-message {
        color: #856404;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        padding: 8px;
        margin-top: 8px;
        border-radius: 4px;
        font-size: 0.9rem;
      }
      
      /* OpenStreetMap marker styles */
      .donor-marker {
        background-color: #3388ff;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        border: 2px solid white;
      }
      
      .org-marker {
        background-color: #ff3333;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        border: 2px solid white;
      }
      
      .org-marker-container {
        background: none !important;
      }
      
      /* Fix for map container */
      #donation-map {
        z-index: 1;
      }
      
      <%= OSM_STYLES %>
    </style>
  </head>
  <body>
    <nav class="navbar navbar-dark bg-dark fixed-top">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">FOOD DONATION</a>
        <div class="con">
          <h3
            class="navbar-toggler"
            data-bs-toggle="offcanvas"
            aria-controls="offcanvasDarkNavbar"
            aria-label="Toggle navigation"
            style="border: none"
          >
            <%= don_details.Donor_name %>
          </h3>
          <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasDarkNavbar"
            aria-controls="offcanvasDarkNavbar"
            aria-label="Toggle navigation"
          >
            <span class="navbar-toggler-icon"></span>
          </button>
        </div>

        <div
          class="offcanvas offcanvas-end text-bg-dark"
          tabindex="-1"
          id="offcanvasDarkNavbar"
          aria-labelledby="offcanvasDarkNavbarLabel"
        >
          <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasDarkNavbarLabel">MENU</h5>
            <button
              type="button"
              class="btn-close btn-close-white"
              data-bs-dismiss="offcanvas"
              aria-label="Close"
            ></button>
          </div>
          <div class="offcanvas-body">
            <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
              <li class="nav-item">
                <a
                  class="nav-link active"
                  aria-current="page"
                  href="#"
                  style="
                    background-color: #666699;
                    padding-left: 20px;
                    border-radius: 5px;
                  "
                  >Home</a
                >
              </li>
              <li class="nav-item">
                <a
                  class="nav-link active"
                  aria-current="page"
                  href="/don_profile"
                  >Profile</a
                >
              </li>
              <li class="nav-item">
                <a
                  class="nav-link active"
                  aria-current="page"
                  href="/don_history"
                  >History</a
                >
              </li>
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="/find-organizations">Find Organizations</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/logout">LogOut</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </nav>
    <div class="maincon">
      <h1 class="head">DONATE FOOD</h1>
      <div class="con2">
        <div class="content">
          <div class="hed">
            <h3 class="additems">Food Items</h3>
            <button class="btb" id="addInputButton">Add Item +</button>
          </div>
          <form id="foodform" action="/donat_food_submit" method="post">
            <label>Donation:</label>
            <input
              type="text"
              name="Donation"
              value="Food"
              id="def_in"
              readonly
            />
            <div id="inputContainer">
              <div>
                <input
                  type="text"
                  name="item"
                  placeholder="Item Name"
                  id="inp1"
                  required
                />
                <input
                  type="number"
                  name="qty"
                  placeholder="Qty"
                  id="inp2"
                  required
                />
              </div>
            </div>

            <!-- Add food quality assessment section -->
            <div class="mt-4 mb-3">
              <h3 class="image-heading">Food Image:</h3>
              <p class="text-muted small">Upload an image of the food to assess its quality (optional)</p>
              
              <div class="image-upload-container">
                <div class="row">
                  <div class="col-md-6">
                    <input type="file" id="foodImageInput" class="form-control" accept="image/*">
                    <div class="mt-2">
                      <button type="button" id="analyzeImageBtn" class="btn btn-secondary" disabled>
                        Analyze Food Quality
                      </button>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div id="imagePreview" class="d-none">
                      <img id="foodImagePreview" class="img-fluid mt-2 rounded" style="max-height: 200px;">
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Quality assessment results -->
              <div id="qualityResults" class="mt-3 d-none">
                <div class="card">
                  <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Food Quality Assessment</h5>
                    <span id="qualityBadge" class="badge rounded-pill"></span>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-6">
                        <p><strong>Identified as:</strong> <span id="foodIdentifiedAs"></span></p>
                        <p><strong>Confidence:</strong> <span id="confidenceScore"></span></p>
                        <p><strong>Freshness:</strong> <span id="freshnessScore"></span></p>
                      </div>
                      <div class="col-md-6">
                        <div id="warningAlert" class="alert alert-warning d-none">
                          <i class="bi bi-exclamation-triangle-fill me-2"></i>
                          <span id="warningText"></span>
                        </div>
                      </div>
                    </div>
                    <input type="hidden" name="foodQualityAssessment" id="foodQualityAssessment">
                  </div>
                </div>
              </div>
            </div>

            <h3 class="donate-to">Donate To:</h3>
            <div class="recommendation-info" id="recommendation-info">Loading recommendations...</div>
            <select name="orgname" id="org_sel" required>
              <option selected hidden value="">Select Organization</option>
              <% for (let i = 0; i < dataArr.org_data.length; i++) { %>
              <option value="<%= dataArr.org_data[i].organization_name %>" data-org-id="<%= i %>">
                <%= dataArr.org_data[i].organization_name %>, <%=
                dataArr.org_data[i].city %>
              </option>
              <% } %>
            </select>
          </form>
          <h3 class="contact">Contact:</h3>
          <p class="phone"><%= don_details.ph_no %></p>
          <h3 class="address-con">Address:</h3>
          <div class="address">
            <p>
              <%= don_details.city %>,<%= don_details.street %><br />
              <%= don_details.dist %>, <%= don_details.state %><br />
              <%= don_details.pincode %>
            </p>
          </div>
          
          <!-- Add map container -->
          <h3 class="map-heading mt-3">Your Location on Map:</h3>
          <div id="donation-map"></div>
          
          <div class="donate">
            <button
              type="submit"
              id="don_bt"
              form="foodform"
              onclick="donate()"
            >
              Donate
            </button>
          </div>
        </div>
      </div>
      <div class="popup">
        <div class="popChild">
          <div>
            <h3 style="color: rgb(1, 184, 1); font-weight: bold">
              Thank You For Donating.!
            </h3>
            <p>
              Organization will reach your address<br />
              and contacts you.
            </p>
          </div>
          <div style="display: flex; justify-content: end">
            <button id="done">Done</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      function removeInput() {
        this.parentElement.remove();
      }
      function addInput() {
        const childDiv = document.createElement("div");
        childDiv.innerHTML = `
            <input type="text" name="item" placeholder="Item Name" id="inp1" required>
            <input type="number" name="qty" placeholder="Qty" id="inp2" required>
        `;
        const inputContainer = document.getElementById("inputContainer");

        const del = document.createElement("img");
        del.src = "https://img.icons8.com/?size=50&id=3062&format=png";
        del.id = "remove";
        childDiv.appendChild(del);
        inputContainer.appendChild(childDiv);

        del.addEventListener("click", removeInput);
      }

      const addButton = document.getElementById("addInputButton");
      addButton.addEventListener("click", addInput);

      document.getElementById("done").addEventListener("click", () => {
        window.location.href = "/don_history";
      });

      function donate() {
        document.querySelectorAll("#inp1").forEach((ele) => {
          if (
            ele.value != "" &&
            document.getElementById("org_sel").value != ""
          ) {
            document.querySelector(".popup").style.display = "flex";
            document.documentElement.scrollTop = 0;
          }
        });
      }
      function donate() {
        document.querySelectorAll("#inp2").forEach((ele) => {
          if (
            ele.value != "" &&
            document.getElementById("org_sel").value != ""
          ) {
            document.querySelector(".popup").style.display = "flex";
            document.documentElement.scrollTop = 0;
          }
        });
      }
      
      // Smart recommendation system
      async function loadRecommendations() {
        try {
          const response = await fetch('/api/recommended-organizations');
          if (!response.ok) {
            throw new Error('Failed to load recommendations');
          }
          
          const recommendations = await response.json();
          
          // Update the recommendation info text
          const infoElement = document.getElementById('recommendation-info');
          infoElement.textContent = 'Organizations are ranked based on your donation history and location.';
          
          // Get the select element
          const selectElement = document.getElementById('org_sel');
          
          // Create a new array of options
          const options = Array.from(selectElement.options);
          
          // Skip the first option (the placeholder)
          const firstOption = options.shift();
          
          // Sort the remaining options based on recommendations
          options.sort((a, b) => {
            const aName = a.value;
            const bName = b.value;
            
            const aRec = recommendations.find(r => r.name === aName) || { score: 0 };
            const bRec = recommendations.find(r => r.name === bName) || { score: 0 };
            
            return bRec.score - aRec.score;
          });
          
          // Clear the select element
          selectElement.innerHTML = '';
          
          // Add the placeholder back
          selectElement.appendChild(firstOption);
          
          // Add the sorted options back
          options.forEach((option, index) => {
            const orgName = option.value;
            const rec = recommendations.find(r => r.name === orgName);
            
            if (rec && rec.score > 0) {
              // Add a "Recommended" badge to the top 3 options
              if (index < 3) {
                option.innerHTML = `${option.innerHTML} <span class="recommended-badge">Recommended</span>`;
              }
            }
            
            selectElement.appendChild(option);
          });
        } catch (error) {
          console.error('Error loading recommendations:', error);
          const infoElement = document.getElementById('recommendation-info');
          infoElement.textContent = 'Organizations are listed alphabetically.';
        }
      }
      
      // Image upload and analysis functionality
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize the file input change event listener
        const foodImageInput = document.getElementById('foodImageInput');
        if (foodImageInput) {
          foodImageInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
              // Enable analyze button
              document.getElementById('analyzeImageBtn').disabled = false;
              
              // Show image preview
              const reader = new FileReader();
              reader.onload = function(event) {
                const imgPreview = document.getElementById('foodImagePreview');
                imgPreview.src = event.target.result;
                document.getElementById('imagePreview').classList.remove('d-none');
              };
              reader.readAsDataURL(file);
            } else {
              document.getElementById('analyzeImageBtn').disabled = true;
              document.getElementById('imagePreview').classList.add('d-none');
            }
          });
        }
        
        // Initialize the analyze button click event listener
        const analyzeImageBtn = document.getElementById('analyzeImageBtn');
        if (analyzeImageBtn) {
          analyzeImageBtn.addEventListener('click', async function() {
            const fileInput = document.getElementById('foodImageInput');
            
            if (!fileInput.files || fileInput.files.length === 0) {
              alert('Please select an image to analyze');
              return;
            }
            
            // Show loading state
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
            this.disabled = true;
            
            try {
              // Use the FoodQualityService directly
              const result = await foodQualityService.analyzeImage(fileInput.files[0]);
              
              // Display results
              document.getElementById('qualityResults').classList.remove('d-none');
              document.getElementById('foodIdentifiedAs').textContent = result.foodType || 'Unknown food';
              document.getElementById('confidenceScore').textContent = result.confidence ? `${Math.round(result.confidence * 100)}%` : 'N/A';
              document.getElementById('freshnessScore').textContent = result.freshness || 'Unknown';
              
              // Set quality badge
              const qualityBadge = document.getElementById('qualityBadge');
              qualityBadge.textContent = result.quality || 'Unknown';
              qualityBadge.className = 'badge rounded-pill ' + foodQualityService.getQualityBadgeClass(result.quality);
              
              // Show warning if applicable
              if (result.warning) {
                document.getElementById('warningText').textContent = result.warning;
                document.getElementById('warningAlert').classList.remove('d-none');
              } else {
                document.getElementById('warningAlert').classList.add('d-none');
              }
              
              // Store assessment in hidden field for form submission
              document.getElementById('foodQualityAssessment').value = JSON.stringify(result);
            } catch (error) {
              console.error('Error analyzing image:', error);
              alert(error.message || 'Failed to analyze the image. Please try again.');
            } finally {
              // Reset button state
              this.innerHTML = 'Analyze Food Quality';
              this.disabled = false;
            }
          });
        }
        
        // Initialize map when the page loads
        document.addEventListener('DOMContentLoaded', function() {
          // Initialize map
          const map = L.map('donation-map').setView([CHENNAI_CENTER.lat, CHENNAI_CENTER.lng], DEFAULT_ZOOM);
          
          // Add the OpenStreetMap tile layer
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
          }).addTo(map);
          
          // Get address components from the page
          const street = "<%= don_details.street %>";
          const city = "<%= don_details.city %>";
          const district = "<%= don_details.dist %>";
          const state = "<%= don_details.state %>";
          const pincode = "<%= don_details.pincode %>";
          
          // Construct full address
          const fullAddress = `${street}, ${city}, ${district}, ${state}, ${pincode}`;
          
          // Geocode using Nominatim
          fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(fullAddress + ', Chennai, Tamil Nadu, India')}`)
            .then(response => response.json())
            .then(data => {
              if (data && data.length > 0) {
                const lat = parseFloat(data[0].lat);
                const lon = parseFloat(data[0].lon);
                
                // Center the map
                map.setView([lat, lon], DEFAULT_ZOOM);
                
                // Add marker
                const marker = L.marker([lat, lon]).addTo(map);
                marker.bindPopup(`<h5>Pickup Location</h5><p>${fullAddress}</p>`).openPopup();
                
                // Add event listener to organization select to show organization location
                document.getElementById('org_sel').addEventListener('change', function() {
                  const selectedOrg = this.value;
                  if (!selectedOrg) return;
                  
                  // Find the selected organization data
                  <% for (let i = 0; i < dataArr.org_data.length; i++) { %>
                    if (selectedOrg === "<%= dataArr.org_data[i].organization_name %>") {
                      const orgStreet = "<%= dataArr.org_data[i].street %>";
                      const orgCity = "<%= dataArr.org_data[i].city %>";
                      const orgDistrict = "<%= dataArr.org_data[i].dist %>";
                      const orgState = "<%= dataArr.org_data[i].state %>";
                      const orgPincode = "<%= dataArr.org_data[i].pincode %>";
                      
                      const orgAddress = `${orgStreet}, ${orgCity}, ${orgDistrict}, ${orgState}, ${orgPincode}`;
                      
                      // Geocode the organization address
                      fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(orgAddress + ', Chennai, Tamil Nadu, India')}`)
                        .then(response => response.json())
                        .then(data => {
                          if (data && data.length > 0) {
                            const lat = parseFloat(data[0].lat);
                            const lon = parseFloat(data[0].lon);
                            
                            // Add marker for organization
                            const orgMarker = L.marker([lat, lon], {
                              icon: L.divIcon({
                                html: `<div class="org-marker" title="${selectedOrg}"></div>`,
                                className: 'org-marker-container',
                                iconSize: [25, 41],
                                iconAnchor: [12, 41]
                              })
                            }).addTo(map);
                            
                            orgMarker.bindPopup(`<h5>${selectedOrg}</h5><p>${orgAddress}</p>`).openPopup();
                            
                            // Adjust map bounds to show both markers
                            const bounds = L.latLngBounds(
                              marker.getLatLng(),
                              [lat, lon]
                            );
                            map.fitBounds(bounds);
                          }
                        })
                        .catch(error => {
                          console.error("Error with Nominatim geocoding:", error);
                        });
                    }
                  <% } %>
                });
              }
            })
            .catch(error => {
              console.error("Error with Nominatim geocoding:", error);
            });
          
          // Load recommendations
          loadRecommendations();
        });
      });
    </script>
  </body>
</html>
